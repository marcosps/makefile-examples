reverse = $(2) $(1)

VAR1 = default_val

define MY_FUNC
	@echo MY_FUNC called, first arg is $(1), second is $(2)
endef

all:
	@echo Using call we can pass arguments to variables. For example to call \
		reverse to reverse a b into $(call reverse,a,b)
	@echo Now using call to "call" the MY_FUNC canned recipe:
	@echo $(call MY_FUNC,arg1 multitext,arg2)
	@
	@# The main makefile (Makefile file) is calling this Makefile $(MAKE),
	@# instead of plain make command. For this reason, if the user calls
	@# "make -n", that would only print commands without executing anything,
	@# the mkdir bellow would still be executed because of the '+', but only
	@# because the $(MAKE) was used on the main Makefile.
	+mkdir -p bla
	@
	@# When a command fails make stops executing. If '-' is present, it
	@# continues executing the next commands even if the commands fail.
	-rmdir blabla
	rmdir bla

print_val:
	@echo The value of VAR1 is $(VAR1)

other_val:
	@echo If the value is set when invoking Make, it cannot be changed \
		inside the rules, but only when using the override keyword
	@echo VAR1 set from the command line: $(VAR1)
